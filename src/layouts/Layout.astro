---
import Background from "../components/Background.astro"
import Footer from "../components/Footer.astro"
import Header from "../components/Header.astro"
import { getLangFromUrl } from "../i18n/utils"

interface Props {
  title: string
  description: string
}
const { title, description } = Astro.props

const lang = getLangFromUrl(Astro.url)
---

<!DOCTYPE html>
<html lang={lang}>
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
    <link rel="stylesheet" href="/styles/devicons.min.css" />
    <link rel="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta property="og:url" content="https://ferran.tech/" />
    <meta property="og:type" content="website" />
    <meta property="og:title" content="FerranJS" />
    <meta property="og:description" content="Ferran Ramírez, full stack developer and software engineer." />
    <meta property="og:image" content="https://ferran.tech/link-preview.jpg" />
    <meta property="twitter:card" content="gallery" />
    <meta property="twitter:title" content="FerranJS" />
    <meta
      property="twitter:description"
      content="Ferran Ramírez, full stack developer and software engineer."
    />
    <meta property="twitter:url" content="https://ferran.tech/" />
    <meta property="twitter:image" content="https://ferran.tech/link-preview.jpg" />
  </head>
  <body class="overflow text-gray-700">
    <Header />
    <slot />

    <Footer />
    <Background />
  </body>
</html>
<style is:global>
  @font-face {
    font-family: Heming Variable;
    src: url("/fonts/heming.woff2") format("woff2");
    font-weight: 100;
    font-style: normal;
  }
  html {
    /* scroll-snap-type: y mandatory;
    scroll-snap-stop: always; */
    /* scroll-behavior: smooth; */
  }

  body {
    animation: bg-color-shift 15s infinite;
  }
  :root {
    --gradien1: linear-gradient(160deg, rgba(255, 255, 255, 0) 30%, transparent);
    --gradien2: linear-gradient(20deg, rgba(255, 255, 255, 0) 20%, transparent);
  }
  @keyframes bg-color-shift {
    0%,
    100% {
      background: var(--gradient1), var(--gradient2), rgb(0, 163, 155);
    }
    17% {
      background: var(--gradient1), var(--gradient2), green;
    }
    34% {
      background: var(--gradient1), var(--gradient2), green;
    }
    51% {
      background: var(--gradient1), var(--gradient2), green;
    }
    68% {
      background: var(--gradient1), var(--gradient2), green;
    }
    85% {
      background: var(--gradient1), var(--gradient2), rgb(198, 56, 44);
    }
  }
  /* inline wavy span text underline */
  span.u {
    @apply decoration-indigo-400 decoration-wavy decoration-[1.1px] underline-offset-[2px];
  }
  /* anchor simple underlines */
  .underlined {
    @apply relative inline-block overflow-hidden after:bg-indigo-400;
  }
  .underlined::after {
    content: "";
    position: absolute;
    bottom: 2px;
    left: 0;
    width: 100%;
    height: 1.6px;
    opacity: 0;
    transition: 0.4s;
    opacity: 1;
    transform: translate3d(-101%, 0, 0);
  }
  .underlined:hover::after {
    transform: translate3d(0, 0, 0);
  }
</style>

<script is:inline>
  const menuButton = document.querySelector("#menu-button")
  const menuContainer = document.querySelector("#menu-container")
  const languageMenu = document.querySelector("#language-menu")

  const toggleMenuButton = () => {
    menuButton?.querySelectorAll("span").forEach((span, i) => {
      if (i != 1) span.classList.toggle("opacity-0")
      if (i == 0) span.classList.toggle("translate-y-3")
      if (i == 2) span.classList.toggle("-translate-y-3")
    })
  }
  const toggleMenu = event => {
    if (isLanguageMenuOpen) {
      toggleLanguageMenu()
      return
    }
    menuContainer.classList.toggle("opacity-0")
    menuContainer.classList.toggle("pointer-events-none")
    toggleMenuButton()
  }
  let isLanguageMenuOpen = false
  const toggleLanguageMenu = event => {
    languageMenu.classList.toggle("opacity-0")
    languageMenu.classList.toggle("pointer-events-none")

    menuContainer.classList.add("opacity-0")
    menuContainer.classList.add("pointer-events-none")
    if (isLanguageMenuOpen) toggleMenuButton()
    isLanguageMenuOpen = !isLanguageMenuOpen
  }
</script>
