---
import { useTranslations } from "../i18n/utils"
import ExternalLink from "./ExternalLink.astro"
import Globe from "./Globe.astro"
import Menu from "./Menu.astro"

const lang = Astro.params.language
const t = useTranslations(lang)
const { backButton } = Astro.props
---

<header
  class="fixed left-0 right-0 top-0 z-40 p-4 pr-5 font-heming text-lg duration-300"
  transition:name="header"
  id="header"
>
  <nav>
    {
      backButton ? (
        <a
          id="backbutton"
          class="underlined !absolute left-0 mx-6 mt-1 cursor-pointer"
          href={"/" + lang + "/" + backButton}
        >
          {t("go back")}
        </a>
      ) : null
    }
    <div class="visible flex justify-end sm:hidden" id="menu-button">
      <button
        id="menu-button"
        class="group z-50 flex flex-col items-end"
        onclick="toggleMenu(event.stopPropagation())"
      >
        <span class="m-1 block h-[2.5px] w-9 bg-indigo-400 duration-500 ease-in-out"></span>
        <span class="m-1 block h-[2.5px] w-9 bg-indigo-300"></span>
        <span class="m-1 block h-[2.5px] w-9 bg-indigo-200 duration-500 ease-in-out"></span>
      </button>
    </div>
    <ul
      class="[&>li]:underlined hidden items-center justify-end gap-6 sm:flex [&>li]:flex [&>li]:items-center"
    >
      <li class="!hidden" id="home-link">
        <a class="underlined" href={"/" + lang + "#hero"}>{t("Home")}</a>
      </li>
      <li>
        <a class="underlined" href={"/" + lang + "#projects"}>{t("Projects")}</a>
      </li>
      <li>
        <a class="underlined" href={"/" + lang + "#contact"}>{t("Contact")}</a>
      </li>
      <li>
        <a class="underlined" href={"/" + lang + "/blog"}>{t("Blog")}</a>
      </li>
      <li class="-mr-1">
        <a class="group mb-1 flex items-center" target="_blank" href="https://github.com/ferranJS/portfolio">
          <i class="devicon-github-plain text-2xl transition-transform duration-200 group-hover:scale-110"></i>
          <ExternalLink classes="w-5 h-5 inline ml-1 " />
        </a>
      </li>
      <li>
        <button
          onclick="toggleLanguageMenu(event.stopPropagation())"
          class="transition-transform duration-200 hover:scale-110"
        >
          <Globe />
        </button>
      </li>
      <li>
        <button
          onclick="toggleDarkMode(event.stopPropagation())"
          class="flex items-center transition-transform duration-200 hover:scale-110"
        >
          <div type="checkbox" class="themeToggle mb-[5px] h-5 w-5 transition-shadow duration-700 ease-out">
          </div>
        </button>
      </li>
    </ul>
  </nav>
</header>
<Menu />

<script is:inline>
  var setDarkMode = () => {
    if (
      localStorage.theme === "dark" ||
      (!("theme" in localStorage) && window.matchMedia("(prefers-color-scheme: dark)").matches)
    ) {
      document.documentElement.dataset.theme = "dark"
      localStorage.theme = "dark"
    } else {
      document.querySelector(".themeToggle").classList.add("checked")
      localStorage.theme = "light"
    }
  }
  var addTransitions = () => setTimeout(document.querySelector("html").classList.add("duration-1000"), 4000)
  setDarkMode()
  addTransitions()
  document.addEventListener("astro:after-swap", setDarkMode)
  document.addEventListener(
    "astro:after-swap",
    document.querySelector("html").classList.remove("duration-1000"),
  )
  // if (history.scrollRestoration) {
  //   history.scrollRestoration = "auto"
  // }

  var toggleDarkMode = () => {
    document.querySelectorAll(".themeToggle").forEach(el => el.classList.toggle("checked"))
    if (localStorage.theme === "dark") {
      document.documentElement.dataset.theme = "light"
      localStorage.theme = "light"
    } else {
      document.documentElement.dataset.theme = "dark"
      localStorage.theme = "dark"
    }
  }

  var menuButton = document.querySelector("#menu-button")
  var menuContainer = document.querySelector("#menu-container")
  var languageMenu = document.querySelector("#language-menu")

  var toggleMenuButton = () => {
    menuButton?.querySelectorAll("span").forEach((span, i) => {
      if (i != 1) span.classList.toggle("opacity-0")
      if (i == 0) span.classList.toggle("translate-y-3")
      if (i == 2) span.classList.toggle("-translate-y-3")
    })
  }
  var toggleMenu = event => {
    if (isLanguageMenuOpen) {
      toggleLanguageMenu()
      return
    }
    menuContainer.classList.toggle("opacity-0")
    menuContainer.classList.toggle("pointer-events-none")
    toggleMenuButton()
  }
  var isLanguageMenuOpen = false
  var toggleLanguageMenu = event => {
    languageMenu.classList.toggle("opacity-0")
    languageMenu.classList.toggle("pointer-events-none")

    menuContainer.classList.add("opacity-0")
    menuContainer.classList.add("pointer-events-none")
    if (isLanguageMenuOpen) toggleMenuButton()
    isLanguageMenuOpen = !isLanguageMenuOpen
  }
</script>

<script>
  // change header color from black to white and viceversa on scroll of the first section
  const header = document.querySelector("header")
  const hero = document.querySelector("#hero")!
  const homeLinks = document.querySelectorAll("#home-link")
  if (window.screen.width > 640) {
    setInterval(() => {
      const rect = hero.getBoundingClientRect()
      if (rect.bottom >= 10) {
        header!.classList.remove("sm:bg-blurred")
        homeLinks[0].classList.add("!hidden")
      } else {
        header!.classList.add("sm:bg-blurred")
        homeLinks[0].classList.remove("!hidden")
      }
    }, 500)
  } else {
    setInterval(() => {
      const rect = hero.getBoundingClientRect()
      if (rect.bottom >= 10) {
        header!.classList.remove("sm:bg-blurred")
        homeLinks[1].classList.add("!hidden")
      } else {
        header!.classList.add("sm:bg-blurred")
        homeLinks[1].classList.remove("!hidden")
      }
    }, 500)
  }
</script>
